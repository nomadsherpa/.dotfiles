{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // ================ Ruby ================
  "print spearator line": {
    "scope": "ruby",
    "prefix": "p",
    "body": ["p '-------------------------------'"]
  },
  "print line": {
    "scope": "ruby",
    "prefix": "pp",
    "body": ["p '-------------------------------'", "p ${0}"]
  },
  "TODO": {
    "scope": "ruby",
    "prefix": "todo",
    "body": ["# TODO: "]
  },
  "require debug": {
    "scope": "ruby",
    "prefix": "rd",
    "body": ["require 'debug'"]
  },
  "require debug then debug": {
    "scope": "ruby",
    "prefix": "d",
    "body": ["require 'debug'", "debugger"]
  },
  "debugger": {
    "scope": "ruby",
    "prefix": "dd",
    "body": ["debugger"]
  },
  "debugger pry": {
    "scope": "ruby",
    "prefix": "dp",
    "body": ["binding.pry"]
  },
  "defi": {
    "scope": "ruby",
    "prefix": "defi",
    "body": ["def initialize", "  ${0}", "end"]
  },
  "defs": {
    "scope": "ruby",
    "prefix": "defs",
    "body": ["def self.${1:item}", "  ${0}", "end"]
  },
  "rubocop disable": {
    "scope": "ruby",
    "prefix": "rd",
    "body": [
      "# rubocop:disable ${1:Layout/LineLength}",
      "# rubocop:enable ${1:Layout/LineLength}"
    ]
  },
  // Overwrites
  ".each": {
    "scope": "ruby",
    "prefix": ".each",
    "body": [".each do |${1:item}|", "\t${0}", "end"]
  },
  "each": {
    "scope": "ruby",
    "prefix": "each",
    "body": ["${1:item}s.each do |${1:item}|", "\t${0}", "end"]
  },
  // ================ Rails ================
  "params[:id]": {
    "scope": "ruby",
    "prefix": "pa",
    "body": ["params[${1::id}]"]
  },
  "Rails.logger.error '--'": {
    "scope": "ruby",
    "prefix": "log",
    "body": ["Rails.logger.error '-----------------------------------------'"]
  },

  // ================ HAML ================
  // "image_tag": {
  //   "scope": "haml",
  //   "prefix": "it",
  //   "body": ["= image_tag '$1'${3:, ${4:class: '$5'}}"]
  // },
  // "linkt_to": {
  //   "scope": "haml",
  //   "prefix": "lt",
  //   "body": ["= link_to '$1', '${2:#}'${3:, class: '$4'}"]
  // },

  // ================ Elixir ================
  "IO.puts \"-----\"": {
    "scope": "elixir",
    "prefix": "p",
    "body": ["IO.puts \"----------------------\""]
  },
  "IO.inspect": {
    "scope": "elixir",
    "prefix": "i",
    "body": ["IO.inspect "]
  },
  "=> ": {
    "scope": "elixir",
    "prefix": "=",
    "body": ["=> "]
  },
  "->": {
    "scope": "elixir",
    "prefix": "-",
    "body": ["->"]
  },

  // ================ JavaScript ================
  "Proprs for a componenet": {
		"scope": "javascript,typescript,vue",
    "prefix": "props",
    "body": [
      "${1:const props = }defineProps({",
			"  ${2}: {",
			"${3:  required: true,}",
			"		type: ${0},",
			"	}",
			"})",
    ],
    "description": "Base for Vue File with SCSS"
  },

  "debugger JS": {
    "scope": "javascript,typescript,vue",
    "prefix": "d",
    "body": ["debugger"]
  },
  "log": {
    "scope": "javascript,typescript,vue",
    "prefix": "l",
    "body": ["console.log('----------------------');"]
  },
  "log2": {
    "scope": "javascript,typescript,vue",
    "prefix": "p",
    "body": ["console.log('----------------------');"]
  },
  // "anonymous function": {
  //   "scope": "javascript,typescript,vue",
  //   "prefix": "f",
  //   "body": [
  //     "function(${1:arguments}) {",
  //     "\t${0}",
  //     "}",
  //   ]
  // },
}
